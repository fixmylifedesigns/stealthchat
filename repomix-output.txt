This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-07-03T18:22:25.732Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.gitignore
eslint.config.mjs
jsconfig.json
next.config.mjs
package.json
postcss.config.js
public/file.svg
public/globe.svg
public/next.svg
public/vercel.svg
public/window.svg
README.md
src/app/api/socket/route.js
src/app/globals.css
src/app/layout.js
src/app/page.js
src/app/stealthchat copy/page.jsx
src/app/stealthchat/page.jsx
src/components/VideoCall/CallControls.js
src/components/VideoCall/DeviceSettings.js
src/components/VideoCall/IncomingCallModal.js
src/components/VideoCall/RoomControls.js
src/components/VideoCall/UserList.js
src/components/VideoCall/VideoCallApp.js
src/components/VideoCall/VideoPlayer.js
src/hooks/useSocket.js
tailwind.config.js

================================================================
Repository Files
================================================================

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: eslint.config.mjs
================
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [...compat.extends("next/core-web-vitals")];

export default eslintConfig;

================
File: jsconfig.json
================
{
  "compilerOptions": {
    "paths": {
      "@/*": ["./src/*"]
    }
  }
}

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {
  serverExternalPackages: ['socket.io']
};

export default nextConfig;

================
File: package.json
================
{
  "name": "photoverse",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "socket-server": "node server.js"
  },
  "dependencies": {
    "@tailwindcss/postcss": "^4.1.11",
    "lucide-react": "^0.525.0",
    "next": "15.3.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "simple-peer": "^9.11.1",
    "socket.io": "^4.8.1",
    "socket.io-client": "^4.8.1"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11"
  }
}

================
File: postcss.config.js
================
module.exports = {
  plugins: ["@tailwindcss/postcss"],
};

================
File: public/file.svg
================
<svg fill="none" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.5 13.5V5.41a1 1 0 0 0-.3-.7L9.8.29A1 1 0 0 0 9.08 0H1.5v13.5A2.5 2.5 0 0 0 4 16h8a2.5 2.5 0 0 0 2.5-2.5m-1.5 0v-7H8v-5H3v12a1 1 0 0 0 1 1h8a1 1 0 0 0 1-1M9.5 5V2.12L12.38 5zM5.13 5h-.62v1.25h2.12V5zm-.62 3h7.12v1.25H4.5zm.62 3h-.62v1.25h7.12V11z" clip-rule="evenodd" fill="#666" fill-rule="evenodd"/></svg>

================
File: public/globe.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><g clip-path="url(#a)"><path fill-rule="evenodd" clip-rule="evenodd" d="M10.27 14.1a6.5 6.5 0 0 0 3.67-3.45q-1.24.21-2.7.34-.31 1.83-.97 3.1M8 16A8 8 0 1 0 8 0a8 8 0 0 0 0 16m.48-1.52a7 7 0 0 1-.96 0H7.5a4 4 0 0 1-.84-1.32q-.38-.89-.63-2.08a40 40 0 0 0 3.92 0q-.25 1.2-.63 2.08a4 4 0 0 1-.84 1.31zm2.94-4.76q1.66-.15 2.95-.43a7 7 0 0 0 0-2.58q-1.3-.27-2.95-.43a18 18 0 0 1 0 3.44m-1.27-3.54a17 17 0 0 1 0 3.64 39 39 0 0 1-4.3 0 17 17 0 0 1 0-3.64 39 39 0 0 1 4.3 0m1.1-1.17q1.45.13 2.69.34a6.5 6.5 0 0 0-3.67-3.44q.65 1.26.98 3.1M8.48 1.5l.01.02q.41.37.84 1.31.38.89.63 2.08a40 40 0 0 0-3.92 0q.25-1.2.63-2.08a4 4 0 0 1 .85-1.32 7 7 0 0 1 .96 0m-2.75.4a6.5 6.5 0 0 0-3.67 3.44 29 29 0 0 1 2.7-.34q.31-1.83.97-3.1M4.58 6.28q-1.66.16-2.95.43a7 7 0 0 0 0 2.58q1.3.27 2.95.43a18 18 0 0 1 0-3.44m.17 4.71q-1.45-.12-2.69-.34a6.5 6.5 0 0 0 3.67 3.44q-.65-1.27-.98-3.1" fill="#666"/></g><defs><clipPath id="a"><path fill="#fff" d="M0 0h16v16H0z"/></clipPath></defs></svg>

================
File: public/next.svg
================
<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 394 80"><path fill="#000" d="M262 0h68.5v12.7h-27.2v66.6h-13.6V12.7H262V0ZM149 0v12.7H94v20.4h44.3v12.6H94v21h55v12.6H80.5V0h68.7zm34.3 0h-17.8l63.8 79.4h17.9l-32-39.7 32-39.6h-17.9l-23 28.6-23-28.6zm18.3 56.7-9-11-27.1 33.7h17.8l18.3-22.7z"/><path fill="#000" d="M81 79.3 17 0H0v79.3h13.6V17l50.2 62.3H81Zm252.6-.4c-1 0-1.8-.4-2.5-1s-1.1-1.6-1.1-2.6.3-1.8 1-2.5 1.6-1 2.6-1 1.8.3 2.5 1a3.4 3.4 0 0 1 .6 4.3 3.7 3.7 0 0 1-3 1.8zm23.2-33.5h6v23.3c0 2.1-.4 4-1.3 5.5a9.1 9.1 0 0 1-3.8 3.5c-1.6.8-3.5 1.3-5.7 1.3-2 0-3.7-.4-5.3-1s-2.8-1.8-3.7-3.2c-.9-1.3-1.4-3-1.4-5h6c.1.8.3 1.6.7 2.2s1 1.2 1.6 1.5c.7.4 1.5.5 2.4.5 1 0 1.8-.2 2.4-.6a4 4 0 0 0 1.6-1.8c.3-.8.5-1.8.5-3V45.5zm30.9 9.1a4.4 4.4 0 0 0-2-3.3 7.5 7.5 0 0 0-4.3-1.1c-1.3 0-2.4.2-3.3.5-.9.4-1.6 1-2 1.6a3.5 3.5 0 0 0-.3 4c.3.5.7.9 1.3 1.2l1.8 1 2 .5 3.2.8c1.3.3 2.5.7 3.7 1.2a13 13 0 0 1 3.2 1.8 8.1 8.1 0 0 1 3 6.5c0 2-.5 3.7-1.5 5.1a10 10 0 0 1-4.4 3.5c-1.8.8-4.1 1.2-6.8 1.2-2.6 0-4.9-.4-6.8-1.2-2-.8-3.4-2-4.5-3.5a10 10 0 0 1-1.7-5.6h6a5 5 0 0 0 3.5 4.6c1 .4 2.2.6 3.4.6 1.3 0 2.5-.2 3.5-.6 1-.4 1.8-1 2.4-1.7a4 4 0 0 0 .8-2.4c0-.9-.2-1.6-.7-2.2a11 11 0 0 0-2.1-1.4l-3.2-1-3.8-1c-2.8-.7-5-1.7-6.6-3.2a7.2 7.2 0 0 1-2.4-5.7 8 8 0 0 1 1.7-5 10 10 0 0 1 4.3-3.5c2-.8 4-1.2 6.4-1.2 2.3 0 4.4.4 6.2 1.2 1.8.8 3.2 2 4.3 3.4 1 1.4 1.5 3 1.5 5h-5.8z"/></svg>

================
File: public/vercel.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1155 1000"><path d="m577.3 0 577.4 1000H0z" fill="#fff"/></svg>

================
File: public/window.svg
================
<svg fill="none" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 16 16"><path fill-rule="evenodd" clip-rule="evenodd" d="M1.5 2.5h13v10a1 1 0 0 1-1 1h-11a1 1 0 0 1-1-1zM0 1h16v11.5a2.5 2.5 0 0 1-2.5 2.5h-11A2.5 2.5 0 0 1 0 12.5zm3.75 4.5a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5M7 4.75a.75.75 0 1 1-1.5 0 .75.75 0 0 1 1.5 0m1.75.75a.75.75 0 1 0 0-1.5.75.75 0 0 0 0 1.5" fill="#666"/></svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.js`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: src/app/api/socket/route.js
================
import { NextResponse } from 'next/server'
import { Server } from 'socket.io'

let io
let httpServer

export async function GET() {
  if (!io) {
    console.log('Starting Socket.IO server...')
    
    httpServer = require('http').createServer()
    
    io = new Server(httpServer, {
      cors: {
        origin: "*",
        methods: ["GET", "POST"]
      }
    })

    // Room management
    const rooms = new Map()

    io.on('connection', (socket) => {
      console.log('User connected:', socket.id)
      
      socket.emit('me', socket.id)

      socket.on('join-room', (data) => {
        const { roomId, name } = data
        console.log(`${socket.id} (${name}) joining room: ${roomId}`)
        
        socket.join(roomId)
        socket.currentRoom = roomId
        socket.userName = name
        
        // Add user to room tracking
        if (!rooms.has(roomId)) {
          rooms.set(roomId, new Map())
        }
        rooms.get(roomId).set(socket.id, { id: socket.id, name })
        
        // Send current room users to everyone in room
        const roomUsers = Array.from(rooms.get(roomId).values())
        io.to(roomId).emit('room-users', roomUsers)
        
        // Notify others that user joined
        socket.to(roomId).emit('user-joined', { id: socket.id, name })
      })

      socket.on('leave-room', (roomId) => {
        console.log(`${socket.id} leaving room: ${roomId}`)
        socket.leave(roomId)
        
        if (rooms.has(roomId)) {
          rooms.get(roomId).delete(socket.id)
          if (rooms.get(roomId).size === 0) {
            rooms.delete(roomId)
          } else {
            const roomUsers = Array.from(rooms.get(roomId).values())
            io.to(roomId).emit('room-users', roomUsers)
          }
        }
        
        socket.to(roomId).emit('user-left', socket.id)
        socket.currentRoom = null
        socket.userName = null
      })

      socket.on('calling-user', (data) => {
        console.log(`${socket.id} calling ${data.userToCall}`)
        socket.to(data.userToCall).emit('receiving-call', {
          signal: data.signalData,
          from: socket.id,
          name: data.name
        })
      })

      socket.on('accepting-call', (data) => {
        console.log(`${socket.id} accepting call from ${data.to}`)
        socket.to(data.to).emit('call-accepted', {
          signal: data.signal,
          from: socket.id
        })
      })

      socket.on('disconnect', () => {
        console.log('User disconnected:', socket.id)
        
        if (socket.currentRoom && rooms.has(socket.currentRoom)) {
          rooms.get(socket.currentRoom).delete(socket.id)
          if (rooms.get(socket.currentRoom).size === 0) {
            rooms.delete(socket.currentRoom)
          } else {
            const roomUsers = Array.from(rooms.get(socket.currentRoom).values())
            io.to(socket.currentRoom).emit('room-users', roomUsers)
          }
          socket.to(socket.currentRoom).emit('user-left', socket.id)
        }
      })
    })

    httpServer.listen(5001)
    console.log('Socket.IO server running on port 5001')
  }

  return NextResponse.json({ status: 'Socket.IO server running' })
}

export const POST = GET

================
File: src/app/globals.css
================
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

================
File: src/app/layout.js
================
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        {children}
      </body>
    </html>
  );
}

================
File: src/app/page.js
================
import Image from "next/image";

export default function Home() {
  return (
    <div className="grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]">
      <main className="flex flex-col gap-[32px] row-start-2 items-center sm:items-start">
        <Image
          className="dark:invert"
          src="/next.svg"
          alt="Next.js logo"
          width={180}
          height={38}
          priority
        />
        <ol className="list-inside list-decimal text-sm/6 text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
          <li className="mb-2 tracking-[-.01em]">
            Get started by editing{" "}
            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-[family-name:var(--font-geist-mono)] font-semibold">
              src/app/page.js
            </code>
            .
          </li>
          <li className="tracking-[-.01em]">
            Save and see your changes instantly.
          </li>
        </ol>

        <div className="flex gap-4 items-center flex-col sm:flex-row">
          <a
            className="rounded-full border border-solid border-transparent transition-colors flex items-center justify-center bg-foreground text-background gap-2 hover:bg-[#383838] dark:hover:bg-[#ccc] font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 sm:w-auto"
            href="https://vercel.com/new?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            <Image
              className="dark:invert"
              src="/vercel.svg"
              alt="Vercel logomark"
              width={20}
              height={20}
            />
            Deploy now
          </a>
          <a
            className="rounded-full border border-solid border-black/[.08] dark:border-white/[.145] transition-colors flex items-center justify-center hover:bg-[#f2f2f2] dark:hover:bg-[#1a1a1a] hover:border-transparent font-medium text-sm sm:text-base h-10 sm:h-12 px-4 sm:px-5 w-full sm:w-auto md:w-[158px]"
            href="https://nextjs.org/docs?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
            target="_blank"
            rel="noopener noreferrer"
          >
            Read our docs
          </a>
        </div>
      </main>
      <footer className="row-start-3 flex gap-[24px] flex-wrap items-center justify-center">
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org/learn?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/file.svg"
            alt="File icon"
            width={16}
            height={16}
          />
          Learn
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://vercel.com/templates?framework=next.js&utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/window.svg"
            alt="Window icon"
            width={16}
            height={16}
          />
          Examples
        </a>
        <a
          className="flex items-center gap-2 hover:underline hover:underline-offset-4"
          href="https://nextjs.org?utm_source=create-next-app&utm_medium=appdir-template-tw&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          <Image
            aria-hidden
            src="/globe.svg"
            alt="Globe icon"
            width={16}
            height={16}
          />
          Go to nextjs.org →
        </a>
      </footer>
    </div>
  );
}

================
File: src/app/stealthchat copy/page.jsx
================
"use client";

import { useEffect, useRef, useState } from "react";
import { Phone, PhoneOff, Copy, Check } from "lucide-react";
import Peer from "simple-peer";
import io from "socket.io-client";

let socket;

export default function Home() {
  const [me, setMe] = useState("");
  const [stream, setStream] = useState();
  const [receivingCall, setReceivingCall] = useState(false);
  const [caller, setCaller] = useState("");
  const [callerSignal, setCallerSignal] = useState();
  const [callAccepted, setCallAccepted] = useState(false);
  const [idToCall, setIdToCall] = useState("");
  const [callEnded, setCallEnded] = useState(false);
  const [name, setName] = useState("");
  const [copied, setCopied] = useState(false);
  const [callerName, setCallerName] = useState("");

  const myVideo = useRef();
  const userVideo = useRef();
  const connectionRef = useRef();

  useEffect(() => {
    console.log("Starting camera initialization...");

    // Get user media
    navigator.mediaDevices
      .getUserMedia({ video: true, audio: true })
      .then((stream) => {
        console.log("Camera stream obtained:", stream);
        setStream(stream);
      })
      .catch((error) => {
        console.error("Error accessing media devices:", error);
      });
  }, []);

  // Separate useEffect to handle setting the video source
  useEffect(() => {
    if (stream && myVideo.current) {
      console.log("Setting video source...");
      myVideo.current.srcObject = stream;
    }
  }, [stream]);

useEffect(() => {
  const socketInitializer = async () => {
    // Initialize the Socket.IO server
    await fetch('/api/socket')
    
    // Connect to the Socket.IO server on port 5001
    socket = io('http://localhost:5001')

    socket.on('connect', () => {
      console.log('✅ Connected! ID:', socket.id)
    })

    socket.on('me', (id) => {
      console.log('✅ Received ID:', id)
      setMe(id)
    })

    socket.on('callUser', (data) => {
      setReceivingCall(true)
      setCaller(data.from)
      setCallerName(data.name)
      setCallerSignal(data.signal)
    })
  }

  socketInitializer()

  return () => {
    if (socket) socket.disconnect()
  }
}, [])

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(me);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (err) {
      console.error("Failed to copy text: ", err);
    }
  };

  const callUser = (id) => {
    const peer = new Peer({
      initiator: true,
      trickle: false,
      stream: stream,
    });

    peer.on("signal", (data) => {
      socket.emit("callUser", {
        userToCall: id,
        signalData: data,
        from: me,
        name: name,
      });
    });

    peer.on("stream", (stream) => {
      if (userVideo.current) {
        userVideo.current.srcObject = stream;
      }
    });

    socket.on("callAccepted", (signal) => {
      setCallAccepted(true);
      peer.signal(signal);
    });

    connectionRef.current = peer;
  };

  const answerCall = () => {
    setCallAccepted(true);
    const peer = new Peer({
      initiator: false,
      trickle: false,
      stream: stream,
    });

    peer.on("signal", (data) => {
      socket.emit("answerCall", { signal: data, to: caller });
    });

    peer.on("stream", (stream) => {
      if (userVideo.current) {
        userVideo.current.srcObject = stream;
      }
    });

    peer.signal(callerSignal);
    connectionRef.current = peer;
    setReceivingCall(false);
  };

  const leaveCall = () => {
    setCallEnded(true);
    connectionRef.current?.destroy();
    window.location.reload();
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 to-purple-600">
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-4xl font-bold text-center text-white mb-8">
          StealthChat
        </h1>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Video Section */}
          <div className="lg:col-span-2">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* My Video */}
              <div className="bg-gray-900 rounded-lg overflow-hidden">
                <div className="p-4 bg-gray-800">
                  <h3 className="text-white font-semibold">
                    You ({name || "Anonymous"})
                  </h3>
                </div>
                <div className="aspect-video flex items-center justify-center">
                  {stream ? (
                    <video
                      playsInline
                      muted
                      ref={myVideo}
                      autoPlay
                      className="w-full h-full object-cover"
                      suppressHydrationWarning
                    />
                  ) : (
                    <div className="text-white">Loading camera...</div>
                  )}
                </div>
              </div>

              {/* User Video */}
              <div className="bg-gray-900 rounded-lg overflow-hidden">
                <div className="p-4 bg-gray-800">
                  <h3 className="text-white font-semibold">
                    {callAccepted && !callEnded
                      ? callerName || "User"
                      : "Waiting..."}
                  </h3>
                </div>
                <div className="aspect-video flex items-center justify-center">
                  {callAccepted && !callEnded ? (
                    <video
                      playsInline
                      ref={userVideo}
                      autoPlay
                      className="w-full h-full object-cover"
                      suppressHydrationWarning
                    />
                  ) : (
                    <div className="text-gray-400">No active call</div>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Controls Section */}
          <div className="space-y-6">
            <div className="bg-white rounded-lg p-6 shadow-lg">
              <h3 className="text-lg font-semibold mb-4">Your Information</h3>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Your Name
                  </label>
                  <input
                    type="text"
                    value={name}
                    onChange={(e) => setName(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                    placeholder="Enter your name"
                  />
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Your ID
                  </label>
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={me}
                      readOnly
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-sm font-mono"
                    />
                    <button
                      onClick={copyToClipboard}
                      className="px-3 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
                      title="Copy ID"
                    >
                      {copied ? <Check size={16} /> : <Copy size={16} />}
                    </button>
                  </div>
                  {copied && (
                    <p className="text-sm text-green-600 mt-1">
                      ID copied to clipboard!
                    </p>
                  )}
                </div>
              </div>
            </div>

            <div className="bg-white rounded-lg p-6 shadow-lg">
              <h3 className="text-lg font-semibold mb-4">Make a Call</h3>

              <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    ID to Call
                  </label>
                  <input
                    type="text"
                    value={idToCall}
                    onChange={(e) => setIdToCall(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono"
                    placeholder="Paste friend's ID here"
                  />
                </div>

                <div className="flex justify-center">
                  {callAccepted && !callEnded ? (
                    <button
                      onClick={leaveCall}
                      className="flex items-center gap-2 px-6 py-3 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
                    >
                      <PhoneOff size={20} />
                      End Call
                    </button>
                  ) : (
                    <button
                      onClick={() => callUser(idToCall)}
                      disabled={!idToCall.trim()}
                      className="flex items-center gap-2 px-6 py-3 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                    >
                      <Phone size={20} />
                      Call
                    </button>
                  )}
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Incoming Call Modal */}
        {receivingCall && !callAccepted && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-8 text-center max-w-md mx-4">
              <h2 className="text-2xl font-bold mb-4">Incoming Call</h2>
              <p className="text-lg mb-6">
                {callerName || "Anonymous"} is calling you...
              </p>
              <div className="flex gap-4 justify-center">
                <button
                  onClick={answerCall}
                  className="flex items-center gap-2 px-6 py-3 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors"
                >
                  <Phone size={20} />
                  Answer
                </button>
                <button
                  onClick={() => setReceivingCall(false)}
                  className="flex items-center gap-2 px-6 py-3 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
                >
                  <PhoneOff size={20} />
                  Decline
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}

================
File: src/app/stealthchat/page.jsx
================
import { Suspense } from "react";
import VideoCallApp from "@/components/VideoCall/VideoCallApp";

export default function StealthChatPage() {
  return (
    <Suspense fallback={<div>Loading...</div>}>
      <div className="text-black">
        <VideoCallApp />
      </div>
    </Suspense>
  );
}

================
File: src/components/VideoCall/CallControls.js
================
import { Phone, PhoneOff, Copy, Check } from 'lucide-react'

export default function CallControls({ 
  name, 
  setName, 
  me, 
  idToCall, 
  setIdToCall, 
  callAccepted, 
  callEnded, 
  copied, 
  onCopy, 
  onCall, 
  onLeave 
}) {
  return (
    <>
      <div className="bg-white rounded-lg p-6 shadow-lg">
        <h3 className="text-lg font-semibold mb-4">Your Information</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Your Name
            </label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter your name"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Share Call Link
            </label>
            <div className="flex gap-2">
              <input
                type="text"
                value={me ? `${typeof window !== 'undefined' ? window.location.origin : ''}/stealthchat?call=${me}` : ''}
                readOnly
                className="flex-1 px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-sm"
              />
              <button
                onClick={onCopy}
                className="px-3 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
                title="Copy call link"
              >
                {copied ? <Check size={16} /> : <Copy size={16} />}
              </button>
            </div>
            {copied && (
              <p className="text-sm text-green-600 mt-1">Call link copied!</p>
            )}
          </div>
        </div>
      </div>

      <div className="bg-white rounded-lg p-6 shadow-lg">
        <h3 className="text-lg font-semibold mb-4">Make a Call</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              ID to Call
            </label>
            <input
              type="text"
              value={idToCall}
              onChange={(e) => setIdToCall(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono"
              placeholder="Paste friend's ID or call link"
            />
          </div>

          <div className="flex justify-center">
            {callAccepted && !callEnded ? (
              <button
                onClick={onLeave}
                className="flex items-center gap-2 px-6 py-3 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
              >
                <PhoneOff size={20} />
                End Call
              </button>
            ) : (
              <button
                onClick={() => onCall(idToCall)}
                disabled={!idToCall.trim()}
                className="flex items-center gap-2 px-6 py-3 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
              >
                <Phone size={20} />
                Call
              </button>
            )}
          </div>
        </div>
      </div>
    </>
  )
}

================
File: src/components/VideoCall/DeviceSettings.js
================
export default function DeviceSettings({ 
  devices, 
  selectedCamera, 
  selectedMicrophone, 
  onCameraChange, 
  onMicrophoneChange 
}) {
  return (
    <div className="bg-white rounded-lg p-6 shadow-lg">
      <h3 className="text-lg font-semibold mb-4">Device Settings</h3>
      
      <div className="space-y-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Camera
          </label>
          <select
            value={selectedCamera}
            onChange={(e) => onCameraChange(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {devices.cameras.map((camera) => (
              <option key={camera.deviceId} value={camera.deviceId}>
                {camera.label || `Camera ${camera.deviceId.slice(0, 8)}`}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Microphone
          </label>
          <select
            value={selectedMicrophone}
            onChange={(e) => onMicrophoneChange(e.target.value)}
            className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
          >
            {devices.microphones.map((mic) => (
              <option key={mic.deviceId} value={mic.deviceId}>
                {mic.label || `Microphone ${mic.deviceId.slice(0, 8)}`}
              </option>
            ))}
          </select>
        </div>
      </div>
    </div>
  )
}

================
File: src/components/VideoCall/IncomingCallModal.js
================
import { Phone, PhoneOff } from 'lucide-react'

export default function IncomingCallModal({ 
  receivingCall, 
  callAccepted, 
  callerName, 
  onAnswer, 
  onDecline 
}) {
  if (!receivingCall || callAccepted) return null

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
      <div className="bg-white rounded-lg p-8 text-center max-w-md mx-4">
        <h2 className="text-2xl font-bold mb-4">Incoming Call</h2>
        <p className="text-lg mb-6">
          {callerName || 'Anonymous'} is calling you...
        </p>
        <div className="flex gap-4 justify-center">
          <button
            onClick={onAnswer}
            className="flex items-center gap-2 px-6 py-3 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors"
          >
            <Phone size={20} />
            Answer
          </button>
          <button
            onClick={onDecline}
            className="flex items-center gap-2 px-6 py-3 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
          >
            <PhoneOff size={20} />
            Decline
          </button>
        </div>
      </div>
    </div>
  )
}

================
File: src/components/VideoCall/RoomControls.js
================
import { Copy, Check, LogIn, LogOut } from 'lucide-react'

export default function RoomControls({ 
  name, 
  setName, 
  currentRoom,
  setCurrentRoom,
  copied, 
  onCopyLink, 
  onJoinRoom,
  onLeaveRoom,
  isInRoom
}) {
  const handleJoinRoom = () => {
    const roomToJoin = currentRoom.trim() || undefined
    onJoinRoom(roomToJoin)
  }

  return (
    <>
      <div className="bg-white rounded-lg p-6 shadow-lg">
        <h3 className="text-lg font-semibold mb-4">Your Information</h3>
        
        <div className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Your Name
            </label>
            <input
              type="text"
              value={name}
              onChange={(e) => setName(e.target.value)}
              className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              placeholder="Enter your name"
              disabled={isInRoom}
            />
          </div>

          {isInRoom && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Share Room Link
              </label>
              <div className="flex gap-2">
                <input
                  type="text"
                  value={`${typeof window !== 'undefined' ? window.location.origin : ''}/stealthchat?call=${currentRoom}`}
                  readOnly
                  className="flex-1 px-3 py-2 border border-gray-300 rounded-md bg-gray-50 text-sm"
                />
                <button
                  onClick={onCopyLink}
                  className="px-3 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
                  title="Copy room link"
                >
                  {copied ? <Check size={16} /> : <Copy size={16} />}
                </button>
              </div>
              {copied && (
                <p className="text-sm text-green-600 mt-1">Room link copied!</p>
              )}
            </div>
          )}
        </div>
      </div>

      <div className="bg-white rounded-lg p-6 shadow-lg">
        <h3 className="text-lg font-semibold mb-4">Room Controls</h3>
        
        <div className="space-y-4">
          {!isInRoom ? (
            <>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Room ID (optional)
                </label>
                <input
                  type="text"
                  value={currentRoom}
                  onChange={(e) => setCurrentRoom(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 font-mono"
                  placeholder="Leave empty to create new room"
                />
              </div>

              <div className="flex justify-center">
                <button
                  onClick={handleJoinRoom}
                  disabled={!name.trim()}
                  className="flex items-center gap-2 px-6 py-3 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors disabled:bg-gray-400 disabled:cursor-not-allowed"
                >
                  <LogIn size={20} />
                  {currentRoom ? 'Join Room' : 'Create Room'}
                </button>
              </div>
            </>
          ) : (
            <div className="flex justify-center">
              <button
                onClick={onLeaveRoom}
                className="flex items-center gap-2 px-6 py-3 bg-red-500 text-white rounded-md hover:bg-red-600 transition-colors"
              >
                <LogOut size={20} />
                Leave Room
              </button>
            </div>
          )}
        </div>
      </div>
    </>
  )
}

================
File: src/components/VideoCall/UserList.js
================
import { Users, User } from 'lucide-react'

export default function UserList({ users = [], currentUserId }) {
  return (
    <div className="bg-white rounded-lg p-6 shadow-lg">
      <h3 className="text-lg font-semibold mb-4 flex items-center gap-2">
        <Users size={20} />
        Users in Room ({users.length})
      </h3>
      
      <div className="space-y-2">
        {users.length === 0 ? (
          <p className="text-gray-500 text-sm">No users in room</p>
        ) : (
          users.map((user) => (
            <div 
              key={user.id} 
              className={`flex items-center gap-3 p-2 rounded ${
                user.id === currentUserId ? 'bg-blue-100' : 'bg-gray-50'
              }`}
            >
              <User size={16} className="text-gray-600" />
              <span className="text-sm">
                {user.name} {user.id === currentUserId && '(You)'}
              </span>
            </div>
          ))
        )}
      </div>
    </div>
  )
}

================
File: src/components/VideoCall/VideoCallApp.js
================
'use client'

import { useEffect, useRef, useState } from 'react'
import { useSearchParams } from 'next/navigation'
import Peer from 'simple-peer'
import io from 'socket.io-client'
import VideoPlayer from './VideoPlayer'
import DeviceSettings from './DeviceSettings'
import RoomControls from './RoomControls'
import UserList from './UserList'

let socket

export default function VideoCallApp() {
  const searchParams = useSearchParams()
  const roomId = searchParams.get('call')

  // State
  const [me, setMe] = useState("")
  const [stream, setStream] = useState()
  const [roomUsers, setRoomUsers] = useState([])
  const [peers, setPeers] = useState({})
  const [name, setName] = useState("")
  const [currentRoom, setCurrentRoom] = useState(roomId || "")
  const [copied, setCopied] = useState(false)
  const [isInRoom, setIsInRoom] = useState(false)
  
  // Media controls
  const [videoEnabled, setVideoEnabled] = useState(true)
  const [audioEnabled, setAudioEnabled] = useState(true)
  const [devices, setDevices] = useState({ cameras: [], microphones: [] })
  const [selectedCamera, setSelectedCamera] = useState('')
  const [selectedMicrophone, setSelectedMicrophone] = useState('')

  const myVideo = useRef()
  const peersRef = useRef({})

  // Initialize camera
  useEffect(() => {
    const initializeMedia = async () => {
      try {
        console.log("Starting camera initialization...")
        const mediaStream = await navigator.mediaDevices.getUserMedia({ video: true, audio: true })
        console.log("Camera stream obtained:", mediaStream)
        setStream(mediaStream)
      } catch (error) {
        console.error("Error accessing media devices:", error)
      }
    }

    initializeMedia()
  }, [])

  // Set video source when stream changes
  useEffect(() => {
    if (stream && myVideo.current) {
      console.log("Setting my video source...")
      myVideo.current.srcObject = stream
      
      const videoTrack = stream.getVideoTracks()[0]
      const audioTrack = stream.getAudioTracks()[0]
      if (videoTrack) setVideoEnabled(videoTrack.enabled)
      if (audioTrack) setAudioEnabled(audioTrack.enabled)
    }
  }, [stream])

  // Get available devices
  useEffect(() => {
    const getDevices = async () => {
      try {
        const deviceList = await navigator.mediaDevices.enumerateDevices()
        const cameras = deviceList.filter(device => device.kind === 'videoinput')
        const microphones = deviceList.filter(device => device.kind === 'audioinput')
        
        setDevices({ cameras, microphones })
        
        if (cameras.length > 0) setSelectedCamera(cameras[0].deviceId)
        if (microphones.length > 0) setSelectedMicrophone(microphones[0].deviceId)
      } catch (error) {
        console.error('Error getting devices:', error)
      }
    }

    getDevices()
  }, [])

  // Initialize socket (only once)
  useEffect(() => {
    if (socket) return

    const initSocket = async () => {
      await fetch('/api/socket')
      
      socket = io('http://localhost:5001')

      socket.on('connect', () => {
        console.log('✅ Connected! ID:', socket.id)
      })

      socket.on('me', (id) => {
        console.log('✅ Received ID:', id)
        setMe(id)
      })

      socket.on('room-users', (users) => {
        console.log('📝 Room users updated:', users)
        setRoomUsers(users)
      })

      socket.on('user-joined', (userData) => {
        console.log('👋 New user joined:', userData)
        // Don't create connection here - wait for them to call us or we call them
      })

      socket.on('user-left', (userId) => {
        console.log('👋 User left:', userId)
        if (peersRef.current[userId]) {
          peersRef.current[userId].destroy()
          delete peersRef.current[userId]
          setPeers(prev => {
            const newPeers = { ...prev }
            delete newPeers[userId]
            return newPeers
          })
        }
      })

      socket.on('receiving-call', (data) => {
        console.log('📞 Receiving call from:', data.from, data.name)
        answerCall(data.from, data.signal, data.name)
      })

      socket.on('call-accepted', (data) => {
        console.log('✅ Call accepted by:', data.from)
        if (peersRef.current[data.from]) {
          peersRef.current[data.from].signal(data.signal)
        }
      })
    }

    initSocket()

    return () => {
      if (socket) {
        socket.disconnect()
        socket = null
      }
    }
  }, [])

  // When we join a room, initiate calls to existing users
  useEffect(() => {
    if (roomUsers.length > 0 && me && stream && isInRoom) {
      const otherUsers = roomUsers.filter(user => user.id !== me)
      console.log('🔄 Checking connections for other users:', otherUsers)
      
      otherUsers.forEach(user => {
        if (!peersRef.current[user.id]) {
          console.log('📞 Calling existing user:', user.id, user.name)
          // Small delay to ensure everything is ready
          setTimeout(() => createPeer(user.id, user.name), 500)
        }
      })
    }
  }, [roomUsers, me, stream, isInRoom])

  // Create peer connection (initiator)
  const createPeer = (userToCall, userName) => {
    if (!stream) {
      console.log('❌ No stream available for peer connection')
      return
    }

    console.log('🔗 Creating peer connection to:', userToCall, userName)
    
    const peer = new Peer({
      initiator: true,
      trickle: false,
      stream: stream
    })

    peer.on('signal', (signal) => {
      console.log('📡 Sending signal to:', userToCall)
      socket.emit('calling-user', {
        userToCall,
        signalData: signal,
        from: me,
        name: name
      })
    })

    peer.on('stream', (remoteStream) => {
      console.log('🎥 Received stream from:', userToCall, remoteStream)
      setPeers(prev => ({
        ...prev,
        [userToCall]: {
          peer,
          stream: remoteStream,
          name: userName
        }
      }))
    })

    peer.on('connect', () => {
      console.log('🔗 Peer connected to:', userToCall)
    })

    peer.on('error', (err) => {
      console.error('❌ Peer error with', userToCall, ':', err)
    })

    peer.on('close', () => {
      console.log('❌ Peer connection closed with:', userToCall)
    })

    peersRef.current[userToCall] = peer
    return peer
  }

  // Answer incoming call (receiver)
  const answerCall = (callerId, signal, callerName) => {
    if (!stream) {
      console.log('❌ No stream available to answer call')
      return
    }

    console.log('📞 Answering call from:', callerId, callerName)
    
    const peer = new Peer({
      initiator: false,
      trickle: false,
      stream: stream
    })

    peer.on('signal', (answerSignal) => {
      console.log('📡 Sending answer signal to:', callerId)
      socket.emit('accepting-call', {
        signal: answerSignal,
        to: callerId
      })
    })

    peer.on('stream', (remoteStream) => {
      console.log('🎥 Received stream from caller:', callerId, remoteStream)
      setPeers(prev => ({
        ...prev,
        [callerId]: {
          peer,
          stream: remoteStream,
          name: callerName
        }
      }))
    })

    peer.on('connect', () => {
      console.log('🔗 Answer peer connected to:', callerId)
    })

    peer.on('error', (err) => {
      console.error('❌ Answer peer error with', callerId, ':', err)
    })

    peer.signal(signal)
    peersRef.current[callerId] = peer
  }

  // Join room
  const joinRoom = (roomId) => {
    if (!name.trim()) {
      alert('Please enter your name first')
      return
    }
    
    if (!socket) {
      alert('Not connected to server')
      return
    }
    
    console.log('🚪 Joining room:', roomId)
    setCurrentRoom(roomId)
    setIsInRoom(true)
    socket.emit('join-room', {
      roomId: roomId || me,
      name: name.trim()
    })
  }

  // Leave room
  const leaveRoom = () => {
    console.log('🚪 Leaving room:', currentRoom)
    socket.emit('leave-room', currentRoom)
    
    // Destroy all peer connections
    Object.values(peersRef.current).forEach(peer => peer.destroy())
    peersRef.current = {}
    setPeers({})
    setRoomUsers([])
    setCurrentRoom("")
    setIsInRoom(false)
    
    // Update URL
    if (typeof window !== 'undefined') {
      window.history.pushState({}, '', '/stealthchat')
    }
  }

  // Auto-join room if URL has room ID
  useEffect(() => {
    if (roomId && me && name && stream && !isInRoom) {
      console.log('🔄 Auto-joining room:', roomId)
      joinRoom(roomId)
    }
  }, [roomId, me, name, stream, isInRoom])

  // Media controls
  const toggleVideo = () => {
    if (stream) {
      const videoTrack = stream.getVideoTracks()[0]
      if (videoTrack) {
        videoTrack.enabled = !videoTrack.enabled
        setVideoEnabled(videoTrack.enabled)
      }
    }
  }

  const toggleAudio = () => {
    if (stream) {
      const audioTrack = stream.getAudioTracks()[0]
      if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled
        setAudioEnabled(audioTrack.enabled)
      }
    }
  }

  const switchCamera = async (deviceId) => {
    try {
      const newStream = await navigator.mediaDevices.getUserMedia({
        video: { deviceId: { exact: deviceId } },
        audio: { deviceId: selectedMicrophone ? { exact: selectedMicrophone } : true }
      })
      
      if (stream) {
        stream.getTracks().forEach(track => track.stop())
      }
      
      setStream(newStream)
      setSelectedCamera(deviceId)
      
      if (myVideo.current) {
        myVideo.current.srcObject = newStream
      }
    } catch (error) {
      console.error('Error switching camera:', error)
    }
  }

  const switchMicrophone = async (deviceId) => {
    try {
      const newStream = await navigator.mediaDevices.getUserMedia({
        video: { deviceId: selectedCamera ? { exact: selectedCamera } : true },
        audio: { deviceId: { exact: deviceId } }
      })
      
      if (stream) {
        stream.getTracks().forEach(track => track.stop())
      }
      
      setStream(newStream)
      setSelectedMicrophone(deviceId)
      
      if (myVideo.current) {
        myVideo.current.srcObject = newStream
      }
    } catch (error) {
      console.error('Error switching microphone:', error)
    }
  }

  // Copy room link
  const copyRoomLink = async () => {
    try {
      const shareUrl = `${typeof window !== 'undefined' ? window.location.origin : ''}/stealthchat?call=${currentRoom || me}`
      await navigator.clipboard.writeText(shareUrl)
      setCopied(true)
      setTimeout(() => setCopied(false), 2000)
    } catch (err) {
      console.error('Failed to copy text: ', err)
    }
  }

  console.log('🎥 Current peers:', Object.keys(peers))
  console.log('👥 Room users:', roomUsers)

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-500 to-purple-600">
      <div className="container mx-auto px-4 py-8">
        <h1 className="text-4xl font-bold text-center text-white mb-8">StealthChat</h1>
        
        {isInRoom && (
          <div className="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded mb-4">
            Room: {currentRoom} ({roomUsers.length} user{roomUsers.length !== 1 ? 's' : ''}) - 
            Video connections: {Object.keys(peers).length}
          </div>
        )}
        
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
          {/* Video Section */}
          <div className="lg:col-span-3">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {/* My Video */}
              <VideoPlayer
                ref={myVideo}
                stream={stream}
                name={name || 'Anonymous'}
                title="You"
                videoEnabled={videoEnabled}
                audioEnabled={audioEnabled}
                onToggleVideo={toggleVideo}
                onToggleAudio={toggleAudio}
                isLocal={true}
              />

              {/* Other Users' Videos */}
              {Object.entries(peers).map(([userId, peerData]) => (
                <VideoPlayer
                  key={userId}
                  stream={peerData.stream}
                  name={peerData.name}
                  title={peerData.name}
                  isLocal={false}
                />
              ))}
            </div>
          </div>

          {/* Controls Section */}
          <div className="space-y-6">
            <DeviceSettings
              devices={devices}
              selectedCamera={selectedCamera}
              selectedMicrophone={selectedMicrophone}
              onCameraChange={switchCamera}
              onMicrophoneChange={switchMicrophone}
            />

            <RoomControls
              name={name}
              setName={setName}
              currentRoom={currentRoom}
              setCurrentRoom={setCurrentRoom}
              copied={copied}
              onCopyLink={copyRoomLink}
              onJoinRoom={joinRoom}
              onLeaveRoom={leaveRoom}
              isInRoom={isInRoom}
            />

            {isInRoom && <UserList users={roomUsers} currentUserId={me} />}
          </div>
        </div>
      </div>
    </div>
  )
}

================
File: src/components/VideoCall/VideoPlayer.js
================
import { forwardRef, useEffect, useRef } from 'react'

const VideoPlayer = forwardRef(({ 
  stream, 
  name, 
  title, 
  videoEnabled = true, 
  audioEnabled = true, 
  onToggleVideo, 
  onToggleAudio, 
  isLocal = false 
}, ref) => {
  
  const videoRef = useRef()

  // Handle stream for remote videos
  useEffect(() => {
    if (stream && !isLocal && videoRef.current) {
      console.log('Setting remote stream for:', title)
      videoRef.current.srcObject = stream
    }
  }, [stream, isLocal, title])

  // Use the passed ref for local video, internal ref for remote
  const currentRef = isLocal ? ref : videoRef

  return (
    <div className="bg-gray-900 rounded-lg overflow-hidden relative">
      <div className="p-4 bg-gray-800">
        <h3 className="text-white font-semibold">{title}</h3>
        {!isLocal && (
          <p className="text-gray-300 text-xs">
            {stream ? 'Stream connected' : 'No stream'}
          </p>
        )}
      </div>
      <div className="aspect-video flex items-center justify-center relative">
        {stream ? (
          <>
            <video
              playsInline
              muted={isLocal}
              ref={currentRef}
              autoPlay
              className="w-full h-full object-cover"
              suppressHydrationWarning
              onLoadedMetadata={() => console.log('Video metadata loaded for:', title)}
              onError={(e) => console.error('Video error for', title, ':', e)}
            />
            {!videoEnabled && isLocal && (
              <div className="absolute inset-0 bg-gray-800 flex items-center justify-center">
                <div className="text-white text-center">
                  <div className="w-16 h-16 bg-gray-600 rounded-full flex items-center justify-center mx-auto mb-2">
                    {name?.[0]?.toUpperCase() || '?'}
                  </div>
                  <p>Camera Off</p>
                </div>
              </div>
            )}
          </>
        ) : (
          <div className="text-gray-400">
            {isLocal ? "Loading camera..." : "Connecting..."}
          </div>
        )}
      </div>
      
      {/* Controls for local video only */}
      {isLocal && onToggleVideo && onToggleAudio && (
        <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2">
          <div className="flex gap-2">
            <button
              onClick={onToggleVideo}
              className={`p-2 rounded-full ${videoEnabled ? 'bg-gray-700 hover:bg-gray-600' : 'bg-red-600 hover:bg-red-700'} text-white transition-colors`}
              title={videoEnabled ? 'Turn off camera' : 'Turn on camera'}
            >
              {videoEnabled ? '📹' : '📹❌'}
            </button>
            <button
              onClick={onToggleAudio}
              className={`p-2 rounded-full ${audioEnabled ? 'bg-gray-700 hover:bg-gray-600' : 'bg-red-600 hover:bg-red-700'} text-white transition-colors`}
              title={audioEnabled ? 'Mute microphone' : 'Unmute microphone'}
            >
              {audioEnabled ? '🎤' : '🎤❌'}
            </button>
          </div>
        </div>
      )}
    </div>
  )
})

VideoPlayer.displayName = 'VideoPlayer'
export default VideoPlayer

================
File: src/hooks/useSocket.js
================
// hooks/useSocket.js
import { useRef, useEffect } from "react";
import { io } from "socket.io-client";

export default function useSocket() {
  const socketRef = useRef();

  useEffect(() => {
    if (!socketRef.current) {
      socketRef.current = io({
        path: "/api/socket",
      });
    }
  }, []);

  return socketRef.current;
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    './src/app/**/*.{js,jsx}',
    './src/components/**/*.{js,jsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
